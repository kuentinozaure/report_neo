/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 161.0, "minX": 0.0, "maxY": 69916.0, "series": [{"data": [[0.0, 161.0], [0.1, 177.0], [0.2, 181.0], [0.3, 200.0], [0.4, 206.0], [0.5, 208.0], [0.6, 209.0], [0.7, 223.0], [0.8, 224.0], [0.9, 227.0], [1.0, 227.0], [1.1, 230.0], [1.2, 233.0], [1.3, 234.0], [1.4, 235.0], [1.5, 237.0], [1.6, 239.0], [1.7, 240.0], [1.8, 241.0], [1.9, 244.0], [2.0, 249.0], [2.1, 252.0], [2.2, 253.0], [2.3, 256.0], [2.4, 266.0], [2.5, 273.0], [2.6, 273.0], [2.7, 276.0], [2.8, 279.0], [2.9, 279.0], [3.0, 283.0], [3.1, 284.0], [3.2, 288.0], [3.3, 290.0], [3.4, 292.0], [3.5, 299.0], [3.6, 300.0], [3.7, 302.0], [3.8, 308.0], [3.9, 308.0], [4.0, 315.0], [4.1, 315.0], [4.2, 317.0], [4.3, 326.0], [4.4, 329.0], [4.5, 329.0], [4.6, 332.0], [4.7, 333.0], [4.8, 339.0], [4.9, 339.0], [5.0, 350.0], [5.1, 351.0], [5.2, 358.0], [5.3, 360.0], [5.4, 367.0], [5.5, 374.0], [5.6, 377.0], [5.7, 379.0], [5.8, 382.0], [5.9, 393.0], [6.0, 407.0], [6.1, 414.0], [6.2, 417.0], [6.3, 517.0], [6.4, 563.0], [6.5, 682.0], [6.6, 1074.0], [6.7, 3468.0], [6.8, 3919.0], [6.9, 4001.0], [7.0, 4078.0], [7.1, 4185.0], [7.2, 4264.0], [7.3, 4293.0], [7.4, 4558.0], [7.5, 4601.0], [7.6, 4652.0], [7.7, 4668.0], [7.8, 4712.0], [7.9, 4724.0], [8.0, 4738.0], [8.1, 4768.0], [8.2, 4806.0], [8.3, 4829.0], [8.4, 4945.0], [8.5, 4960.0], [8.6, 5022.0], [8.7, 5073.0], [8.8, 5141.0], [8.9, 5149.0], [9.0, 5188.0], [9.1, 5194.0], [9.2, 5276.0], [9.3, 5401.0], [9.4, 5414.0], [9.5, 5415.0], [9.6, 5417.0], [9.7, 5423.0], [9.8, 5443.0], [9.9, 5467.0], [10.0, 5508.0], [10.1, 5538.0], [10.2, 5660.0], [10.3, 5660.0], [10.4, 5672.0], [10.5, 5676.0], [10.6, 5679.0], [10.7, 5704.0], [10.8, 5728.0], [10.9, 5761.0], [11.0, 5862.0], [11.1, 5896.0], [11.2, 5905.0], [11.3, 5943.0], [11.4, 5973.0], [11.5, 6019.0], [11.6, 6048.0], [11.7, 6073.0], [11.8, 6073.0], [11.9, 6174.0], [12.0, 6216.0], [12.1, 6252.0], [12.2, 6319.0], [12.3, 6383.0], [12.4, 6385.0], [12.5, 6408.0], [12.6, 6481.0], [12.7, 6521.0], [12.8, 6589.0], [12.9, 6650.0], [13.0, 6664.0], [13.1, 6682.0], [13.2, 6693.0], [13.3, 6700.0], [13.4, 6759.0], [13.5, 6813.0], [13.6, 6834.0], [13.7, 6836.0], [13.8, 6926.0], [13.9, 6957.0], [14.0, 7114.0], [14.1, 7143.0], [14.2, 7178.0], [14.3, 7181.0], [14.4, 7397.0], [14.5, 7535.0], [14.6, 7653.0], [14.7, 7780.0], [14.8, 7823.0], [14.9, 7845.0], [15.0, 7942.0], [15.1, 8472.0], [15.2, 8486.0], [15.3, 8633.0], [15.4, 8861.0], [15.5, 8889.0], [15.6, 8921.0], [15.7, 9042.0], [15.8, 9077.0], [15.9, 9149.0], [16.0, 9165.0], [16.1, 9268.0], [16.2, 9332.0], [16.3, 9439.0], [16.4, 9509.0], [16.5, 9535.0], [16.6, 9637.0], [16.7, 9690.0], [16.8, 9697.0], [16.9, 9707.0], [17.0, 9750.0], [17.1, 9794.0], [17.2, 9891.0], [17.3, 9892.0], [17.4, 9921.0], [17.5, 9942.0], [17.6, 9991.0], [17.7, 10084.0], [17.8, 10085.0], [17.9, 10086.0], [18.0, 10156.0], [18.1, 10187.0], [18.2, 10195.0], [18.3, 10201.0], [18.4, 10204.0], [18.5, 10247.0], [18.6, 10266.0], [18.7, 10303.0], [18.8, 10331.0], [18.9, 10373.0], [19.0, 10420.0], [19.1, 10439.0], [19.2, 10471.0], [19.3, 10481.0], [19.4, 10490.0], [19.5, 10493.0], [19.6, 10594.0], [19.7, 10595.0], [19.8, 10619.0], [19.9, 10647.0], [20.0, 10652.0], [20.1, 10658.0], [20.2, 10659.0], [20.3, 10689.0], [20.4, 10724.0], [20.5, 10758.0], [20.6, 10763.0], [20.7, 10848.0], [20.8, 10929.0], [20.9, 10938.0], [21.0, 10979.0], [21.1, 11082.0], [21.2, 11082.0], [21.3, 11113.0], [21.4, 11131.0], [21.5, 11132.0], [21.6, 11169.0], [21.7, 11243.0], [21.8, 11285.0], [21.9, 11291.0], [22.0, 11306.0], [22.1, 11307.0], [22.2, 11308.0], [22.3, 11308.0], [22.4, 11311.0], [22.5, 11312.0], [22.6, 11318.0], [22.7, 11334.0], [22.8, 11337.0], [22.9, 11379.0], [23.0, 11464.0], [23.1, 11492.0], [23.2, 11546.0], [23.3, 11632.0], [23.4, 11635.0], [23.5, 11656.0], [23.6, 11670.0], [23.7, 11706.0], [23.8, 11855.0], [23.9, 12057.0], [24.0, 12079.0], [24.1, 12175.0], [24.2, 12196.0], [24.3, 12219.0], [24.4, 12306.0], [24.5, 12359.0], [24.6, 12430.0], [24.7, 12455.0], [24.8, 12486.0], [24.9, 12495.0], [25.0, 12533.0], [25.1, 12647.0], [25.2, 12727.0], [25.3, 12732.0], [25.4, 12770.0], [25.5, 12937.0], [25.6, 12951.0], [25.7, 13009.0], [25.8, 13039.0], [25.9, 13173.0], [26.0, 13173.0], [26.1, 13244.0], [26.2, 13262.0], [26.3, 13590.0], [26.4, 13767.0], [26.5, 13900.0], [26.6, 13929.0], [26.7, 14041.0], [26.8, 14047.0], [26.9, 14075.0], [27.0, 14244.0], [27.1, 14426.0], [27.2, 14459.0], [27.3, 14486.0], [27.4, 14492.0], [27.5, 14553.0], [27.6, 14583.0], [27.7, 14583.0], [27.8, 14591.0], [27.9, 14598.0], [28.0, 14648.0], [28.1, 14664.0], [28.2, 14734.0], [28.3, 14757.0], [28.4, 14764.0], [28.5, 14932.0], [28.6, 14987.0], [28.7, 15077.0], [28.8, 15098.0], [28.9, 15168.0], [29.0, 15178.0], [29.1, 15235.0], [29.2, 15237.0], [29.3, 15238.0], [29.4, 15242.0], [29.5, 15267.0], [29.6, 15271.0], [29.7, 15279.0], [29.8, 15361.0], [29.9, 15390.0], [30.0, 15472.0], [30.1, 15594.0], [30.2, 15595.0], [30.3, 15605.0], [30.4, 15675.0], [30.5, 15765.0], [30.6, 15998.0], [30.7, 16103.0], [30.8, 16110.0], [30.9, 16204.0], [31.0, 16206.0], [31.1, 16243.0], [31.2, 16319.0], [31.3, 16393.0], [31.4, 16407.0], [31.5, 16428.0], [31.6, 16455.0], [31.7, 16460.0], [31.8, 16474.0], [31.9, 16596.0], [32.0, 16611.0], [32.1, 16672.0], [32.2, 16700.0], [32.3, 16725.0], [32.4, 16814.0], [32.5, 16942.0], [32.6, 16992.0], [32.7, 17001.0], [32.8, 17112.0], [32.9, 17164.0], [33.0, 17230.0], [33.1, 17279.0], [33.2, 17390.0], [33.3, 17405.0], [33.4, 17441.0], [33.5, 17487.0], [33.6, 17527.0], [33.7, 17532.0], [33.8, 17626.0], [33.9, 17652.0], [34.0, 17656.0], [34.1, 17809.0], [34.2, 17820.0], [34.3, 17923.0], [34.4, 17952.0], [34.5, 18004.0], [34.6, 18128.0], [34.7, 18161.0], [34.8, 18175.0], [34.9, 18177.0], [35.0, 18190.0], [35.1, 18367.0], [35.2, 18395.0], [35.3, 18431.0], [35.4, 18470.0], [35.5, 18534.0], [35.6, 18550.0], [35.7, 18617.0], [35.8, 18639.0], [35.9, 18640.0], [36.0, 18657.0], [36.1, 18674.0], [36.2, 18742.0], [36.3, 18775.0], [36.4, 18784.0], [36.5, 18790.0], [36.6, 18946.0], [36.7, 18996.0], [36.8, 19004.0], [36.9, 19145.0], [37.0, 19151.0], [37.1, 19155.0], [37.2, 19207.0], [37.3, 19256.0], [37.4, 19272.0], [37.5, 19348.0], [37.6, 19431.0], [37.7, 19436.0], [37.8, 19480.0], [37.9, 19662.0], [38.0, 19684.0], [38.1, 19732.0], [38.2, 19792.0], [38.3, 19798.0], [38.4, 19824.0], [38.5, 19870.0], [38.6, 19881.0], [38.7, 19894.0], [38.8, 20003.0], [38.9, 20092.0], [39.0, 20105.0], [39.1, 20195.0], [39.2, 20204.0], [39.3, 20226.0], [39.4, 20228.0], [39.5, 20236.0], [39.6, 20295.0], [39.7, 20373.0], [39.8, 20404.0], [39.9, 20436.0], [40.0, 20452.0], [40.1, 20485.0], [40.2, 20497.0], [40.3, 20508.0], [40.4, 20528.0], [40.5, 20564.0], [40.6, 20584.0], [40.7, 20630.0], [40.8, 20645.0], [40.9, 20685.0], [41.0, 20753.0], [41.1, 20931.0], [41.2, 20958.0], [41.3, 21087.0], [41.4, 21098.0], [41.5, 21118.0], [41.6, 21204.0], [41.7, 21272.0], [41.8, 21346.0], [41.9, 21396.0], [42.0, 21475.0], [42.1, 21482.0], [42.2, 21486.0], [42.3, 21631.0], [42.4, 21738.0], [42.5, 21794.0], [42.6, 21899.0], [42.7, 22003.0], [42.8, 22014.0], [42.9, 22112.0], [43.0, 22128.0], [43.1, 22135.0], [43.2, 22267.0], [43.3, 22402.0], [43.4, 22456.0], [43.5, 22689.0], [43.6, 22690.0], [43.7, 22732.0], [43.8, 22961.0], [43.9, 22986.0], [44.0, 23149.0], [44.1, 23168.0], [44.2, 23273.0], [44.3, 23312.0], [44.4, 23430.0], [44.5, 23505.0], [44.6, 23513.0], [44.7, 23708.0], [44.8, 23987.0], [44.9, 23988.0], [45.0, 24001.0], [45.1, 24128.0], [45.2, 24159.0], [45.3, 24221.0], [45.4, 24330.0], [45.5, 24383.0], [45.6, 24399.0], [45.7, 24421.0], [45.8, 24523.0], [45.9, 24537.0], [46.0, 24742.0], [46.1, 24819.0], [46.2, 24820.0], [46.3, 24856.0], [46.4, 24972.0], [46.5, 25054.0], [46.6, 25079.0], [46.7, 25185.0], [46.8, 25193.0], [46.9, 25224.0], [47.0, 25256.0], [47.1, 25434.0], [47.2, 25634.0], [47.3, 25666.0], [47.4, 25696.0], [47.5, 25740.0], [47.6, 25832.0], [47.7, 25834.0], [47.8, 25866.0], [47.9, 25883.0], [48.0, 25897.0], [48.1, 25935.0], [48.2, 26148.0], [48.3, 26155.0], [48.4, 26242.0], [48.5, 26309.0], [48.6, 26333.0], [48.7, 26335.0], [48.8, 26505.0], [48.9, 26508.0], [49.0, 26573.0], [49.1, 26764.0], [49.2, 26771.0], [49.3, 26859.0], [49.4, 26878.0], [49.5, 26880.0], [49.6, 26903.0], [49.7, 26962.0], [49.8, 26988.0], [49.9, 27089.0], [50.0, 27128.0], [50.1, 27274.0], [50.2, 27280.0], [50.3, 27284.0], [50.4, 27328.0], [50.5, 27382.0], [50.6, 27469.0], [50.7, 27534.0], [50.8, 27599.0], [50.9, 27648.0], [51.0, 27667.0], [51.1, 27781.0], [51.2, 27837.0], [51.3, 27985.0], [51.4, 28031.0], [51.5, 28039.0], [51.6, 28136.0], [51.7, 28287.0], [51.8, 28428.0], [51.9, 28434.0], [52.0, 28462.0], [52.1, 28472.0], [52.2, 28507.0], [52.3, 28680.0], [52.4, 28689.0], [52.5, 28707.0], [52.6, 28820.0], [52.7, 28820.0], [52.8, 28852.0], [52.9, 28878.0], [53.0, 28919.0], [53.1, 29045.0], [53.2, 29175.0], [53.3, 29251.0], [53.4, 29257.0], [53.5, 29301.0], [53.6, 29314.0], [53.7, 29320.0], [53.8, 29340.0], [53.9, 29366.0], [54.0, 29390.0], [54.1, 29394.0], [54.2, 29406.0], [54.3, 29410.0], [54.4, 29416.0], [54.5, 29419.0], [54.6, 29427.0], [54.7, 29455.0], [54.8, 29568.0], [54.9, 29629.0], [55.0, 29655.0], [55.1, 29780.0], [55.2, 29872.0], [55.3, 29925.0], [55.4, 29931.0], [55.5, 29993.0], [55.6, 30027.0], [55.7, 30040.0], [55.8, 30184.0], [55.9, 30222.0], [56.0, 30381.0], [56.1, 30395.0], [56.2, 30476.0], [56.3, 30687.0], [56.4, 30837.0], [56.5, 31005.0], [56.6, 31027.0], [56.7, 31069.0], [56.8, 31301.0], [56.9, 31328.0], [57.0, 31384.0], [57.1, 31410.0], [57.2, 31413.0], [57.3, 31433.0], [57.4, 31452.0], [57.5, 31518.0], [57.6, 31543.0], [57.7, 31552.0], [57.8, 31565.0], [57.9, 31596.0], [58.0, 31692.0], [58.1, 31693.0], [58.2, 31701.0], [58.3, 31702.0], [58.4, 31709.0], [58.5, 31711.0], [58.6, 31718.0], [58.7, 31719.0], [58.8, 31879.0], [58.9, 31921.0], [59.0, 31932.0], [59.1, 31956.0], [59.2, 31993.0], [59.3, 31995.0], [59.4, 32004.0], [59.5, 32035.0], [59.6, 32178.0], [59.7, 32179.0], [59.8, 32268.0], [59.9, 32285.0], [60.0, 32320.0], [60.1, 32392.0], [60.2, 32394.0], [60.3, 32407.0], [60.4, 32425.0], [60.5, 32472.0], [60.6, 32499.0], [60.7, 32507.0], [60.8, 32585.0], [60.9, 32588.0], [61.0, 32615.0], [61.1, 32632.0], [61.2, 32704.0], [61.3, 32739.0], [61.4, 32751.0], [61.5, 32960.0], [61.6, 32991.0], [61.7, 33051.0], [61.8, 33077.0], [61.9, 33126.0], [62.0, 33139.0], [62.1, 33173.0], [62.2, 33190.0], [62.3, 33193.0], [62.4, 33310.0], [62.5, 33354.0], [62.6, 33417.0], [62.7, 33501.0], [62.8, 33571.0], [62.9, 33605.0], [63.0, 33632.0], [63.1, 33641.0], [63.2, 33742.0], [63.3, 33963.0], [63.4, 33973.0], [63.5, 34013.0], [63.6, 34285.0], [63.7, 34387.0], [63.8, 34790.0], [63.9, 34792.0], [64.0, 34809.0], [64.1, 34822.0], [64.2, 34948.0], [64.3, 34949.0], [64.4, 35065.0], [64.5, 35130.0], [64.6, 35151.0], [64.7, 35169.0], [64.8, 35225.0], [64.9, 35346.0], [65.0, 35352.0], [65.1, 35382.0], [65.2, 35400.0], [65.3, 35502.0], [65.4, 35599.0], [65.5, 35667.0], [65.6, 35779.0], [65.7, 35907.0], [65.8, 35914.0], [65.9, 35935.0], [66.0, 35957.0], [66.1, 36027.0], [66.2, 36081.0], [66.3, 36333.0], [66.4, 36353.0], [66.5, 36432.0], [66.6, 36461.0], [66.7, 36509.0], [66.8, 36529.0], [66.9, 36715.0], [67.0, 36733.0], [67.1, 36768.0], [67.2, 36956.0], [67.3, 36982.0], [67.4, 36994.0], [67.5, 37004.0], [67.6, 37055.0], [67.7, 37105.0], [67.8, 37139.0], [67.9, 37214.0], [68.0, 37239.0], [68.1, 37300.0], [68.2, 37312.0], [68.3, 37409.0], [68.4, 37425.0], [68.5, 37484.0], [68.6, 37497.0], [68.7, 37526.0], [68.8, 37596.0], [68.9, 37606.0], [69.0, 37678.0], [69.1, 37687.0], [69.2, 37690.0], [69.3, 37709.0], [69.4, 37718.0], [69.5, 37758.0], [69.6, 37850.0], [69.7, 37882.0], [69.8, 37926.0], [69.9, 37996.0], [70.0, 38038.0], [70.1, 38292.0], [70.2, 38333.0], [70.3, 38460.0], [70.4, 38572.0], [70.5, 38624.0], [70.6, 38824.0], [70.7, 38847.0], [70.8, 38931.0], [70.9, 39073.0], [71.0, 39078.0], [71.1, 39314.0], [71.2, 39320.0], [71.3, 39552.0], [71.4, 39624.0], [71.5, 39672.0], [71.6, 39764.0], [71.7, 39779.0], [71.8, 39879.0], [71.9, 39893.0], [72.0, 39962.0], [72.1, 40045.0], [72.2, 40069.0], [72.3, 40205.0], [72.4, 40256.0], [72.5, 40334.0], [72.6, 40562.0], [72.7, 40601.0], [72.8, 40607.0], [72.9, 40659.0], [73.0, 40683.0], [73.1, 40746.0], [73.2, 40757.0], [73.3, 40773.0], [73.4, 40936.0], [73.5, 40936.0], [73.6, 41037.0], [73.7, 41067.0], [73.8, 41097.0], [73.9, 41238.0], [74.0, 41265.0], [74.1, 41331.0], [74.2, 41351.0], [74.3, 41353.0], [74.4, 41386.0], [74.5, 41573.0], [74.6, 41600.0], [74.7, 41611.0], [74.8, 41644.0], [74.9, 41655.0], [75.0, 41664.0], [75.1, 41790.0], [75.2, 41916.0], [75.3, 41987.0], [75.4, 42013.0], [75.5, 42025.0], [75.6, 42071.0], [75.7, 42127.0], [75.8, 42163.0], [75.9, 42177.0], [76.0, 42318.0], [76.1, 42499.0], [76.2, 42534.0], [76.3, 42541.0], [76.4, 42610.0], [76.5, 42642.0], [76.6, 42669.0], [76.7, 42815.0], [76.8, 42894.0], [76.9, 42971.0], [77.0, 42973.0], [77.1, 43001.0], [77.2, 43040.0], [77.3, 43137.0], [77.4, 43367.0], [77.5, 43407.0], [77.6, 43508.0], [77.7, 43594.0], [77.8, 43626.0], [77.9, 43796.0], [78.0, 43823.0], [78.1, 43867.0], [78.2, 43879.0], [78.3, 44009.0], [78.4, 44080.0], [78.5, 44162.0], [78.6, 44174.0], [78.7, 44185.0], [78.8, 44503.0], [78.9, 44504.0], [79.0, 44513.0], [79.1, 44577.0], [79.2, 44682.0], [79.3, 44694.0], [79.4, 44707.0], [79.5, 44770.0], [79.6, 44910.0], [79.7, 44917.0], [79.8, 44978.0], [79.9, 45019.0], [80.0, 45064.0], [80.1, 45088.0], [80.2, 45128.0], [80.3, 45219.0], [80.4, 45250.0], [80.5, 45285.0], [80.6, 45399.0], [80.7, 45520.0], [80.8, 45550.0], [80.9, 45592.0], [81.0, 45654.0], [81.1, 45655.0], [81.2, 45766.0], [81.3, 45904.0], [81.4, 45918.0], [81.5, 45965.0], [81.6, 46046.0], [81.7, 46278.0], [81.8, 46287.0], [81.9, 46297.0], [82.0, 46363.0], [82.1, 46458.0], [82.2, 46478.0], [82.3, 46565.0], [82.4, 46757.0], [82.5, 46855.0], [82.6, 46962.0], [82.7, 46977.0], [82.8, 46988.0], [82.9, 47015.0], [83.0, 47027.0], [83.1, 47116.0], [83.2, 47165.0], [83.3, 47197.0], [83.4, 47260.0], [83.5, 47265.0], [83.6, 47267.0], [83.7, 47292.0], [83.8, 47382.0], [83.9, 47413.0], [84.0, 47463.0], [84.1, 47519.0], [84.2, 47532.0], [84.3, 47567.0], [84.4, 47655.0], [84.5, 47703.0], [84.6, 47708.0], [84.7, 47763.0], [84.8, 47770.0], [84.9, 47812.0], [85.0, 47817.0], [85.1, 47825.0], [85.2, 47865.0], [85.3, 47870.0], [85.4, 47925.0], [85.5, 47939.0], [85.6, 48003.0], [85.7, 48024.0], [85.8, 48056.0], [85.9, 48076.0], [86.0, 48134.0], [86.1, 48232.0], [86.2, 48236.0], [86.3, 48273.0], [86.4, 48395.0], [86.5, 48414.0], [86.6, 48459.0], [86.7, 48514.0], [86.8, 48522.0], [86.9, 48552.0], [87.0, 48564.0], [87.1, 48579.0], [87.2, 48631.0], [87.3, 48647.0], [87.4, 48667.0], [87.5, 48672.0], [87.6, 48697.0], [87.7, 48703.0], [87.8, 48725.0], [87.9, 48837.0], [88.0, 48876.0], [88.1, 48954.0], [88.2, 48967.0], [88.3, 48982.0], [88.4, 49002.0], [88.5, 49007.0], [88.6, 49049.0], [88.7, 49078.0], [88.8, 49164.0], [88.9, 49213.0], [89.0, 49223.0], [89.1, 49230.0], [89.2, 49251.0], [89.3, 49252.0], [89.4, 49410.0], [89.5, 49453.0], [89.6, 49469.0], [89.7, 49490.0], [89.8, 49490.0], [89.9, 49553.0], [90.0, 49571.0], [90.1, 49582.0], [90.2, 49608.0], [90.3, 49609.0], [90.4, 49624.0], [90.5, 49638.0], [90.6, 49643.0], [90.7, 49677.0], [90.8, 49677.0], [90.9, 49722.0], [91.0, 49727.0], [91.1, 49734.0], [91.2, 49749.0], [91.3, 49770.0], [91.4, 49773.0], [91.5, 49778.0], [91.6, 49784.0], [91.7, 49789.0], [91.8, 49792.0], [91.9, 49820.0], [92.0, 49833.0], [92.1, 49844.0], [92.2, 49862.0], [92.3, 49863.0], [92.4, 49890.0], [92.5, 49901.0], [92.6, 49959.0], [92.7, 50020.0], [92.8, 50227.0], [92.9, 50261.0], [93.0, 50458.0], [93.1, 66772.0], [93.2, 66925.0], [93.3, 67111.0], [93.4, 67224.0], [93.5, 67244.0], [93.6, 67426.0], [93.7, 67443.0], [93.8, 67499.0], [93.9, 67582.0], [94.0, 67583.0], [94.1, 67627.0], [94.2, 67672.0], [94.3, 67731.0], [94.4, 67781.0], [94.5, 67832.0], [94.6, 67835.0], [94.7, 67872.0], [94.8, 67897.0], [94.9, 67926.0], [95.0, 67930.0], [95.1, 67942.0], [95.2, 67962.0], [95.3, 68006.0], [95.4, 68009.0], [95.5, 68043.0], [95.6, 68048.0], [95.7, 68066.0], [95.8, 68087.0], [95.9, 68146.0], [96.0, 68147.0], [96.1, 68168.0], [96.2, 68221.0], [96.3, 68232.0], [96.4, 68238.0], [96.5, 68250.0], [96.6, 68251.0], [96.7, 68253.0], [96.8, 68265.0], [96.9, 68266.0], [97.0, 68327.0], [97.1, 68350.0], [97.2, 68369.0], [97.3, 68392.0], [97.4, 68399.0], [97.5, 68424.0], [97.6, 68445.0], [97.7, 68453.0], [97.8, 68453.0], [97.9, 68453.0], [98.0, 68460.0], [98.1, 68493.0], [98.2, 68520.0], [98.3, 68527.0], [98.4, 68552.0], [98.5, 68570.0], [98.6, 68583.0], [98.7, 68594.0], [98.8, 68604.0], [98.9, 68616.0], [99.0, 68667.0], [99.1, 68676.0], [99.2, 68703.0], [99.3, 68705.0], [99.4, 68706.0], [99.5, 68771.0], [99.6, 68773.0], [99.7, 68777.0], [99.8, 68881.0], [99.9, 68955.0], [100.0, 69916.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 35.0, "series": [{"data": [[66700.0, 1.0], [68300.0, 5.0], [69900.0, 1.0], [100.0, 3.0], [32900.0, 2.0], [33700.0, 1.0], [35300.0, 4.0], [36900.0, 3.0], [37700.0, 3.0], [38500.0, 1.0], [39300.0, 3.0], [40900.0, 2.0], [41700.0, 2.0], [42500.0, 3.0], [43300.0, 1.0], [44100.0, 3.0], [44900.0, 3.0], [45700.0, 1.0], [46500.0, 1.0], [47300.0, 2.0], [48100.0, 1.0], [48900.0, 3.0], [49700.0, 11.0], [200.0, 35.0], [67400.0, 4.0], [300.0, 26.0], [400.0, 4.0], [500.0, 2.0], [600.0, 1.0], [1000.0, 1.0], [3400.0, 1.0], [3900.0, 1.0], [4000.0, 2.0], [4100.0, 1.0], [4200.0, 2.0], [68100.0, 3.0], [4500.0, 2.0], [4600.0, 3.0], [4700.0, 4.0], [4800.0, 2.0], [4900.0, 2.0], [5000.0, 3.0], [5100.0, 4.0], [5200.0, 1.0], [5400.0, 7.0], [5500.0, 3.0], [5600.0, 5.0], [5700.0, 3.0], [5800.0, 2.0], [5900.0, 4.0], [6000.0, 4.0], [6100.0, 1.0], [6200.0, 2.0], [6300.0, 3.0], [6400.0, 3.0], [6500.0, 2.0], [6600.0, 4.0], [6700.0, 2.0], [6800.0, 4.0], [6900.0, 2.0], [7100.0, 4.0], [7300.0, 1.0], [7500.0, 1.0], [7600.0, 1.0], [7700.0, 1.0], [7800.0, 2.0], [7900.0, 1.0], [8100.0, 1.0], [8400.0, 2.0], [8600.0, 1.0], [8800.0, 2.0], [9000.0, 2.0], [9200.0, 1.0], [9400.0, 2.0], [9600.0, 3.0], [9800.0, 2.0], [10200.0, 4.0], [10000.0, 3.0], [10400.0, 6.0], [10600.0, 7.0], [10800.0, 1.0], [11000.0, 3.0], [11200.0, 3.0], [11600.0, 4.0], [11400.0, 2.0], [12000.0, 2.0], [11800.0, 1.0], [12200.0, 1.0], [12400.0, 4.0], [12600.0, 1.0], [13000.0, 2.0], [13200.0, 2.0], [13400.0, 1.0], [14000.0, 3.0], [14200.0, 1.0], [14400.0, 4.0], [14600.0, 2.0], [15000.0, 3.0], [15200.0, 7.0], [15400.0, 2.0], [15600.0, 2.0], [16200.0, 3.0], [16400.0, 5.0], [16800.0, 1.0], [17200.0, 2.0], [17600.0, 3.0], [18000.0, 1.0], [18400.0, 2.0], [19200.0, 3.0], [19600.0, 2.0], [20400.0, 6.0], [20000.0, 2.0], [21200.0, 2.0], [22400.0, 2.0], [22000.0, 2.0], [21600.0, 1.0], [23200.0, 1.0], [24000.0, 1.0], [24400.0, 1.0], [24800.0, 4.0], [25200.0, 2.0], [25600.0, 3.0], [26800.0, 3.0], [27200.0, 4.0], [27600.0, 2.0], [28000.0, 2.0], [28400.0, 4.0], [28800.0, 4.0], [29200.0, 2.0], [29600.0, 2.0], [30000.0, 2.0], [30400.0, 1.0], [30800.0, 1.0], [31600.0, 2.0], [32400.0, 4.0], [32000.0, 2.0], [33600.0, 3.0], [35200.0, 1.0], [36000.0, 2.0], [37600.0, 4.0], [38400.0, 1.0], [40000.0, 2.0], [41600.0, 5.0], [42400.0, 1.0], [44000.0, 2.0], [45600.0, 2.0], [46400.0, 2.0], [47200.0, 4.0], [48000.0, 4.0], [48800.0, 2.0], [49600.0, 7.0], [50400.0, 1.0], [67200.0, 2.0], [68800.0, 1.0], [67100.0, 1.0], [68700.0, 6.0], [33100.0, 5.0], [34700.0, 2.0], [33900.0, 2.0], [35500.0, 2.0], [36300.0, 2.0], [37100.0, 2.0], [37900.0, 2.0], [39500.0, 1.0], [40300.0, 2.0], [41900.0, 2.0], [43500.0, 2.0], [45100.0, 1.0], [45900.0, 3.0], [46700.0, 1.0], [47500.0, 3.0], [48300.0, 1.0], [49100.0, 1.0], [49900.0, 3.0], [67800.0, 4.0], [66900.0, 1.0], [68500.0, 7.0], [16500.0, 1.0], [16900.0, 3.0], [17300.0, 1.0], [18100.0, 5.0], [18500.0, 2.0], [18900.0, 2.0], [19300.0, 2.0], [19700.0, 3.0], [20100.0, 2.0], [20500.0, 4.0], [20900.0, 2.0], [21300.0, 2.0], [21700.0, 2.0], [22100.0, 3.0], [23300.0, 1.0], [22900.0, 3.0], [24100.0, 3.0], [23700.0, 1.0], [24500.0, 2.0], [24900.0, 1.0], [25700.0, 2.0], [26100.0, 2.0], [26500.0, 3.0], [26900.0, 3.0], [27300.0, 2.0], [27700.0, 1.0], [28100.0, 1.0], [28500.0, 1.0], [29300.0, 8.0], [28900.0, 1.0], [30100.0, 1.0], [29700.0, 2.0], [30500.0, 1.0], [31300.0, 3.0], [31700.0, 6.0], [32100.0, 2.0], [32500.0, 3.0], [33000.0, 2.0], [34600.0, 1.0], [35400.0, 1.0], [36200.0, 1.0], [37000.0, 3.0], [37800.0, 2.0], [38600.0, 1.0], [40200.0, 2.0], [41000.0, 4.0], [42600.0, 3.0], [43400.0, 2.0], [45000.0, 4.0], [45800.0, 1.0], [47400.0, 2.0], [48200.0, 4.0], [49000.0, 5.0], [49800.0, 6.0], [67600.0, 2.0], [67500.0, 2.0], [33300.0, 2.0], [35700.0, 1.0], [34900.0, 2.0], [36500.0, 2.0], [37300.0, 2.0], [38900.0, 1.0], [38100.0, 1.0], [39700.0, 2.0], [40500.0, 1.0], [41300.0, 4.0], [42100.0, 3.0], [42900.0, 2.0], [43700.0, 1.0], [44500.0, 4.0], [45300.0, 1.0], [46900.0, 4.0], [47700.0, 4.0], [48500.0, 5.0], [68200.0, 9.0], [68900.0, 1.0], [8900.0, 1.0], [9100.0, 2.0], [9300.0, 1.0], [9500.0, 2.0], [9700.0, 3.0], [9900.0, 4.0], [10100.0, 3.0], [10300.0, 4.0], [10700.0, 3.0], [10500.0, 2.0], [10900.0, 3.0], [11100.0, 4.0], [11300.0, 11.0], [11500.0, 1.0], [11700.0, 2.0], [12100.0, 2.0], [12300.0, 2.0], [12500.0, 2.0], [12700.0, 3.0], [12900.0, 2.0], [13100.0, 2.0], [13500.0, 1.0], [13700.0, 1.0], [13900.0, 2.0], [14700.0, 3.0], [14500.0, 6.0], [14900.0, 2.0], [15100.0, 2.0], [15300.0, 2.0], [15500.0, 2.0], [15700.0, 1.0], [16100.0, 2.0], [16300.0, 3.0], [15900.0, 1.0], [16600.0, 2.0], [17400.0, 3.0], [17000.0, 1.0], [17800.0, 2.0], [18600.0, 5.0], [19000.0, 1.0], [19400.0, 3.0], [19800.0, 4.0], [20200.0, 5.0], [21400.0, 3.0], [20600.0, 3.0], [21000.0, 3.0], [22200.0, 1.0], [21800.0, 2.0], [22600.0, 2.0], [23400.0, 1.0], [24200.0, 1.0], [25000.0, 2.0], [25400.0, 1.0], [25800.0, 5.0], [26200.0, 1.0], [27000.0, 1.0], [27400.0, 1.0], [28600.0, 2.0], [27800.0, 1.0], [28200.0, 1.0], [29400.0, 6.0], [29000.0, 1.0], [29800.0, 1.0], [30200.0, 1.0], [30600.0, 1.0], [31000.0, 3.0], [31400.0, 4.0], [31800.0, 2.0], [32600.0, 2.0], [32200.0, 2.0], [34000.0, 1.0], [34800.0, 2.0], [36400.0, 2.0], [35600.0, 1.0], [37200.0, 2.0], [38000.0, 1.0], [38800.0, 2.0], [39600.0, 2.0], [41200.0, 2.0], [42000.0, 3.0], [42800.0, 2.0], [43600.0, 1.0], [44400.0, 1.0], [45200.0, 3.0], [46000.0, 1.0], [46800.0, 1.0], [47600.0, 1.0], [48400.0, 2.0], [49200.0, 5.0], [50000.0, 1.0], [68000.0, 6.0], [67900.0, 5.0], [33500.0, 2.0], [34300.0, 1.0], [35100.0, 3.0], [35900.0, 4.0], [36700.0, 3.0], [37500.0, 3.0], [38300.0, 1.0], [39900.0, 1.0], [40700.0, 3.0], [41500.0, 1.0], [42300.0, 1.0], [43100.0, 1.0], [44700.0, 2.0], [45500.0, 3.0], [46300.0, 1.0], [47100.0, 3.0], [47900.0, 2.0], [48700.0, 2.0], [49500.0, 4.0], [68600.0, 4.0], [67700.0, 2.0], [16700.0, 2.0], [17100.0, 2.0], [17500.0, 3.0], [17900.0, 2.0], [18300.0, 3.0], [18700.0, 5.0], [19100.0, 3.0], [19900.0, 1.0], [20300.0, 1.0], [20700.0, 1.0], [21100.0, 1.0], [23100.0, 2.0], [22700.0, 1.0], [23500.0, 2.0], [24300.0, 3.0], [23900.0, 2.0], [24700.0, 1.0], [25100.0, 2.0], [26300.0, 4.0], [25900.0, 1.0], [27500.0, 2.0], [26700.0, 2.0], [27100.0, 1.0], [27900.0, 2.0], [28700.0, 2.0], [29100.0, 1.0], [29500.0, 1.0], [29900.0, 3.0], [30300.0, 2.0], [31500.0, 6.0], [31900.0, 5.0], [32700.0, 4.0], [32300.0, 4.0], [33400.0, 2.0], [34200.0, 1.0], [35000.0, 1.0], [37400.0, 4.0], [38200.0, 1.0], [39000.0, 2.0], [39800.0, 2.0], [40600.0, 4.0], [43000.0, 2.0], [43800.0, 3.0], [44600.0, 2.0], [46200.0, 3.0], [47000.0, 2.0], [47800.0, 6.0], [48600.0, 6.0], [49400.0, 5.0], [50200.0, 2.0], [68400.0, 8.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 69900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 4.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 972.0, "series": [{"data": [[0.0, 68.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 4.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 972.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 36.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 38.03999999999999, "minX": 1.61021484E12, "maxY": 504.7223880597017, "series": [{"data": [[1.6102149E12, 38.03999999999999], [1.61021484E12, 504.7223880597017]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6102149E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 214.0, "minX": 1.0, "maxY": 69916.0, "series": [{"data": [[2.0, 68955.0], [3.0, 68594.0], [4.0, 68777.0], [5.0, 68771.0], [6.0, 68881.0], [7.0, 68583.0], [8.0, 68703.0], [9.0, 68453.0], [10.0, 68773.0], [11.0, 68706.0], [12.0, 68705.0], [13.0, 68327.0], [14.0, 68594.0], [15.0, 68520.0], [16.0, 68266.0], [17.0, 68250.0], [18.0, 68676.0], [20.0, 68561.0], [21.0, 68604.0], [22.0, 68667.0], [23.0, 68434.0], [24.0, 68493.0], [25.0, 68453.0], [26.0, 68527.0], [27.0, 68147.0], [28.0, 68616.0], [29.0, 68453.0], [30.0, 68350.0], [31.0, 68221.0], [33.0, 68445.0], [32.0, 68232.0], [35.0, 68399.0], [34.0, 68392.0], [37.0, 68460.0], [36.0, 68369.0], [39.0, 68424.0], [38.0, 68253.0], [41.0, 68048.0], [40.0, 68087.0], [43.0, 68066.0], [42.0, 67897.0], [45.0, 68168.0], [44.0, 68238.0], [47.0, 68076.0], [49.0, 68245.0], [51.0, 67872.0], [50.0, 68251.0], [53.0, 68043.0], [52.0, 67942.0], [55.0, 67930.0], [54.0, 67940.0], [57.0, 67731.0], [56.0, 67962.0], [59.0, 67926.0], [58.0, 68009.0], [61.0, 67832.0], [60.0, 67672.0], [63.0, 67781.0], [62.0, 67583.0], [67.0, 67627.0], [66.0, 67485.0], [65.0, 67443.0], [64.0, 67835.0], [71.0, 67499.0], [70.0, 67582.0], [69.0, 67244.0], [68.0, 67426.0], [75.0, 66925.0], [74.0, 66772.0], [73.0, 67111.0], [72.0, 67224.0], [79.0, 309.2459016393442], [78.0, 250.6], [77.0, 276.0], [76.0, 214.0], [83.0, 49901.0], [82.0, 49890.0], [81.0, 50020.0], [80.0, 17272.666666666668], [87.0, 50458.0], [86.0, 49862.0], [85.0, 29892.0], [84.0, 50261.0], [91.0, 49820.0], [90.0, 49959.0], [89.0, 49773.0], [88.0, 49833.0], [95.0, 49909.0], [94.0, 49789.0], [93.0, 49754.0], [92.0, 49734.0], [98.0, 49844.0], [97.0, 49749.0], [96.0, 49784.0], [103.0, 49608.0], [102.0, 31187.0], [101.0, 49638.0], [100.0, 36454.666666666664], [107.0, 49677.0], [106.0, 49677.0], [105.0, 49571.0], [104.0, 49624.0], [111.0, 49469.0], [110.0, 49490.0], [109.0, 49770.0], [108.0, 49643.0], [115.0, 49490.0], [114.0, 49553.0], [113.0, 49582.0], [112.0, 49453.0], [119.0, 49410.0], [118.0, 49213.0], [117.0, 49230.0], [116.0, 49609.0], [123.0, 49078.0], [122.0, 29380.5], [121.0, 49251.0], [120.0, 49580.0], [127.0, 49049.0], [126.0, 49164.0], [125.0, 49090.0], [124.0, 49722.0], [135.0, 48676.0], [134.0, 49223.0], [133.0, 48876.0], [132.0, 48967.0], [131.0, 49002.0], [130.0, 48982.0], [129.0, 48837.0], [128.0, 48954.0], [143.0, 48552.0], [142.0, 48703.0], [141.0, 48522.0], [140.0, 48631.0], [139.0, 48667.0], [138.0, 49007.0], [137.0, 48697.0], [136.0, 48725.0], [151.0, 48238.0], [150.0, 48459.0], [149.0, 48579.0], [148.0, 48414.0], [147.0, 48647.0], [146.0, 48236.0], [145.0, 48564.0], [144.0, 48672.0], [159.0, 48232.0], [158.0, 48395.0], [157.0, 48514.0], [156.0, 47939.0], [155.0, 47870.0], [154.0, 47812.0], [153.0, 48134.0], [152.0, 47865.0], [167.0, 47770.0], [166.0, 47825.0], [165.0, 48003.0], [164.0, 48273.0], [163.0, 47708.0], [162.0, 47925.0], [161.0, 48056.0], [160.0, 47763.0], [175.0, 48024.0], [174.0, 47817.0], [173.0, 47817.0], [172.0, 47532.0], [171.0, 47655.0], [170.0, 48076.0], [169.0, 47703.0], [168.0, 47311.0], [183.0, 47260.0], [182.0, 47463.0], [181.0, 47267.0], [180.0, 47519.0], [179.0, 47382.0], [178.0, 47292.0], [177.0, 47413.0], [176.0, 47567.0], [191.0, 46988.0], [190.0, 47165.0], [189.0, 46855.0], [188.0, 47265.0], [187.0, 46977.0], [186.0, 47197.0], [185.0, 46962.0], [184.0, 47015.0], [199.0, 46278.0], [198.0, 46478.0], [197.0, 46458.0], [196.0, 46949.0], [195.0, 46757.0], [194.0, 47027.0], [193.0, 46363.0], [192.0, 47116.0], [207.0, 45655.0], [206.0, 45904.0], [205.0, 45965.0], [204.0, 46297.0], [203.0, 46046.0], [202.0, 46565.0], [201.0, 45918.0], [200.0, 46287.0], [215.0, 45399.0], [214.0, 45088.0], [213.0, 45250.0], [212.0, 45520.0], [211.0, 45839.0], [210.0, 45550.0], [209.0, 45766.0], [208.0, 45654.0], [223.0, 44910.0], [222.0, 45219.0], [221.0, 45019.0], [220.0, 44917.0], [219.0, 45064.0], [218.0, 45083.0], [217.0, 45285.0], [216.0, 45592.0], [231.0, 44682.0], [230.0, 44503.0], [229.0, 44707.0], [228.0, 44504.0], [227.0, 44694.0], [226.0, 44978.0], [225.0, 45128.0], [224.0, 44770.0], [239.0, 44080.0], [238.0, 44174.0], [237.0, 44185.0], [236.0, 43879.0], [235.0, 44460.0], [234.0, 44513.0], [233.0, 44162.0], [232.0, 44577.0], [247.0, 43435.0], [246.0, 43508.0], [245.0, 43594.0], [244.0, 43626.0], [243.0, 43867.0], [242.0, 43796.0], [241.0, 43823.0], [240.0, 44009.0], [255.0, 42894.0], [254.0, 42541.0], [253.0, 43040.0], [252.0, 42971.0], [251.0, 42973.0], [250.0, 43137.0], [249.0, 43367.0], [248.0, 43407.0], [270.0, 42177.0], [271.0, 42163.0], [269.0, 42071.0], [268.0, 42318.0], [267.0, 42541.0], [266.0, 42025.0], [265.0, 41611.0], [264.0, 42642.0], [263.0, 42499.0], [257.0, 41664.0], [256.0, 43001.0], [259.0, 42127.0], [258.0, 42815.0], [262.0, 42610.0], [261.0, 42669.0], [260.0, 42534.0], [286.0, 40601.0], [287.0, 41353.0], [285.0, 40936.0], [284.0, 40757.0], [283.0, 41655.0], [282.0, 41075.0], [281.0, 41573.0], [280.0, 41644.0], [279.0, 41749.0], [273.0, 41600.0], [272.0, 41987.0], [275.0, 41916.0], [274.0, 41097.0], [278.0, 41265.0], [277.0, 42013.0], [276.0, 41790.0], [302.0, 40746.0], [303.0, 40562.0], [301.0, 40607.0], [300.0, 40683.0], [299.0, 40659.0], [298.0, 40069.0], [297.0, 25957.5], [296.0, 40307.5], [295.0, 40773.0], [289.0, 41351.0], [288.0, 41331.0], [291.0, 41238.0], [290.0, 41386.0], [294.0, 41037.0], [293.0, 41067.0], [292.0, 40334.0], [318.0, 38824.0], [319.0, 39314.0], [317.0, 38153.0], [316.0, 39764.0], [315.0, 38460.0], [314.0, 39073.0], [313.0, 39078.0], [312.0, 39552.0], [311.0, 40045.0], [305.0, 39962.0], [304.0, 39879.0], [307.0, 39779.0], [306.0, 25291.0], [310.0, 39672.0], [309.0, 40205.0], [308.0, 39624.0], [334.0, 37709.0], [335.0, 37687.0], [333.0, 37758.0], [332.0, 36994.0], [331.0, 38292.0], [330.0, 38038.0], [329.0, 37497.0], [328.0, 38601.0], [326.0, 37718.0], [321.0, 38847.0], [320.0, 38931.0], [323.0, 39365.0], [322.0, 38572.0], [325.0, 38624.0], [324.0, 37850.0], [350.0, 36027.0], [351.0, 37596.0], [349.0, 37690.0], [348.0, 37300.0], [347.0, 37105.0], [346.0, 37239.0], [345.0, 36333.0], [344.0, 37926.0], [343.0, 37678.0], [337.0, 37996.0], [336.0, 36768.0], [339.0, 37526.0], [338.0, 38333.0], [342.0, 25193.5], [341.0, 37425.0], [340.0, 37551.0], [366.0, 35502.0], [367.0, 36715.0], [365.0, 36529.0], [364.0, 36982.0], [363.0, 36956.0], [362.0, 37055.0], [361.0, 37018.0], [360.0, 36461.0], [359.0, 36733.0], [353.0, 37139.0], [352.0, 37004.0], [355.0, 37606.0], [354.0, 37484.0], [358.0, 36910.5], [356.0, 37409.0], [382.0, 34809.0], [383.0, 34387.0], [381.0, 35382.0], [380.0, 36353.0], [379.0, 35779.0], [378.0, 35559.0], [376.0, 35957.0], [375.0, 34790.0], [369.0, 35667.0], [368.0, 34948.0], [371.0, 35907.0], [370.0, 35935.0], [374.0, 36432.0], [373.0, 36081.0], [372.0, 34949.0], [398.0, 35151.0], [399.0, 34638.0], [397.0, 34285.0], [396.0, 34792.0], [395.0, 35352.0], [394.0, 35225.0], [393.0, 35346.0], [392.0, 35400.0], [391.0, 33742.0], [385.0, 35169.0], [384.0, 35914.0], [387.0, 33973.0], [386.0, 33963.0], [390.0, 35377.0], [389.0, 35130.0], [388.0, 35599.0], [414.0, 32268.0], [415.0, 32615.0], [413.0, 33193.0], [412.0, 33417.0], [411.0, 32285.0], [410.0, 32407.0], [409.0, 33605.0], [408.0, 32507.0], [407.0, 32723.0], [401.0, 35065.0], [400.0, 33632.0], [403.0, 33190.0], [402.0, 33412.0], [406.0, 32632.0], [405.0, 33051.0], [404.0, 34013.0], [430.0, 33077.0], [431.0, 33126.0], [429.0, 32960.0], [428.0, 32392.0], [427.0, 32179.0], [426.0, 32739.0], [425.0, 33310.0], [424.0, 32585.0], [423.0, 32472.0], [417.0, 32386.0], [416.0, 33354.0], [419.0, 33173.0], [418.0, 33641.0], [422.0, 33501.0], [421.0, 33571.0], [420.0, 32991.0], [446.0, 31027.0], [447.0, 31301.0], [445.0, 33139.0], [444.0, 31005.0], [443.0, 32178.0], [442.0, 32320.0], [441.0, 32499.0], [440.0, 32394.0], [439.0, 32704.0], [433.0, 32004.0], [432.0, 32588.0], [435.0, 31433.0], [434.0, 31993.0], [438.0, 31921.0], [437.0, 31328.0], [436.0, 31858.0], [462.0, 31956.0], [463.0, 32751.0], [461.0, 31879.0], [460.0, 31995.0], [459.0, 31413.0], [458.0, 31651.333333333332], [457.0, 31692.0], [456.0, 31605.5], [454.0, 31701.0], [449.0, 32035.0], [448.0, 31565.0], [453.0, 31702.0], [452.0, 31709.0], [478.0, 29334.0], [479.0, 29568.0], [477.0, 29655.0], [476.0, 29629.0], [475.0, 29993.0], [474.0, 31069.0], [473.0, 30538.0], [472.0, 29780.0], [471.0, 32425.0], [465.0, 31596.0], [464.0, 31932.0], [467.0, 31552.0], [466.0, 31543.0], [470.0, 31410.0], [469.0, 31452.0], [468.0, 30040.0], [482.0, 30222.0], [489.0, 31384.0], [488.0, 30395.0], [487.0, 29175.0], [486.0, 30476.0], [485.0, 29700.0], [484.0, 29251.0], [483.0, 31719.0], [481.0, 29455.0], [480.0, 30687.0], [510.0, 28507.0], [511.0, 30381.0], [509.0, 28287.0], [508.0, 28707.0], [507.0, 28462.0], [506.0, 28428.0], [505.0, 29925.0], [504.0, 29045.0], [503.0, 28472.0], [498.0, 29373.428571428572], [496.0, 29123.0], [502.0, 29876.0], [500.0, 29159.666666666668], [540.0, 28820.0], [543.0, 26573.0], [529.0, 27128.0], [528.0, 29366.0], [531.0, 27089.0], [530.0, 29419.0], [533.0, 26880.0], [532.0, 26903.0], [542.0, 26988.0], [541.0, 28878.0], [539.0, 28820.0], [538.0, 26771.0], [537.0, 26508.0], [536.0, 26764.0], [527.0, 27599.0], [513.0, 30184.0], [512.0, 28434.0], [515.0, 28039.0], [514.0, 27985.0], [517.0, 28136.0], [516.0, 27981.0], [519.0, 27284.0], [518.0, 30027.0], [526.0, 27781.0], [525.0, 27328.0], [524.0, 27244.0], [523.0, 27469.0], [522.0, 27837.0], [521.0, 27667.0], [520.0, 29931.0], [535.0, 27280.0], [534.0, 29257.0], [569.0, 26878.0], [573.0, 24383.0], [575.0, 24486.5], [561.0, 27382.0], [560.0, 27534.0], [563.0, 25054.0], [562.0, 25256.0], [565.0, 24537.0], [564.0, 27274.0], [572.0, 26859.0], [571.0, 24124.0], [570.0, 24421.0], [568.0, 26962.0], [551.0, 25634.0], [550.0, 26333.0], [549.0, 25666.0], [548.0, 25866.0], [547.0, 25897.0], [546.0, 28680.0], [545.0, 28689.0], [544.0, 26242.0], [559.0, 27648.0], [558.0, 26505.0], [557.0, 25935.0], [556.0, 26148.0], [555.0, 25185.0], [554.0, 28031.0], [553.0, 25740.0], [552.0, 25832.0], [567.0, 24523.0], [566.0, 24819.0], [604.0, 22732.0], [607.0, 22986.0], [593.0, 23505.0], [592.0, 25696.0], [595.0, 22955.0], [594.0, 23988.0], [597.0, 25224.0], [596.0, 25434.0], [606.0, 24742.0], [605.0, 24820.0], [603.0, 22135.0], [602.0, 23513.0], [601.0, 25079.0], [600.0, 22690.0], [591.0, 25792.0], [577.0, 26370.0], [576.0, 24843.0], [579.0, 23987.0], [578.0, 24330.0], [581.0, 26335.0], [580.0, 24856.0], [583.0, 26155.0], [582.0, 26309.0], [590.0, 23149.0], [589.0, 25883.0], [588.0, 25834.0], [587.0, 20109.5], [586.0, 23430.0], [585.0, 23708.0], [584.0, 24159.0], [599.0, 22961.0], [598.0, 25193.0], [636.0, 20485.0], [639.0, 20204.0], [625.0, 21346.0], [624.0, 21631.0], [627.0, 21087.0], [626.0, 21098.0], [629.0, 20931.0], [628.0, 21019.0], [638.0, 20295.0], [637.0, 20564.0], [635.0, 20436.0], [634.0, 20685.0], [633.0, 22267.0], [632.0, 20483.0], [623.0, 21272.0], [609.0, 21899.0], [608.0, 22014.0], [611.0, 22128.0], [610.0, 22112.0], [613.0, 24399.0], [612.0, 21805.0], [615.0, 22402.0], [614.0, 21794.0], [622.0, 23168.0], [621.0, 21396.0], [620.0, 23273.0], [619.0, 21482.0], [618.0, 24128.0], [617.0, 23312.0], [616.0, 22689.0], [631.0, 20958.0], [630.0, 21118.0], [668.0, 19798.0], [671.0, 19436.0], [657.0, 20373.0], [656.0, 20630.0], [659.0, 21486.0], [658.0, 19732.0], [661.0, 21204.0], [660.0, 19684.0], [670.0, 20528.0], [669.0, 20497.0], [667.0, 19906.0], [666.0, 19894.0], [665.0, 19256.0], [664.0, 20195.0], [655.0, 21475.0], [641.0, 20645.0], [640.0, 20404.0], [643.0, 20228.0], [642.0, 22003.0], [645.0, 20753.0], [644.0, 20584.0], [647.0, 21738.0], [646.0, 20226.0], [654.0, 19824.0], [653.0, 22456.0], [652.0, 20508.0], [651.0, 20092.0], [650.0, 20105.0], [649.0, 19881.0], [648.0, 20003.0], [663.0, 19272.0], [662.0, 20236.0], [696.0, 19004.0], [702.0, 18627.0], [703.0, 18550.0], [689.0, 18175.0], [688.0, 19373.0], [691.0, 19207.0], [690.0, 18996.0], [700.0, 18534.0], [699.0, 18746.5], [697.0, 18639.0], [687.0, 19145.0], [673.0, 19480.0], [672.0, 20452.0], [675.0, 18946.0], [674.0, 19870.0], [677.0, 18657.0], [676.0, 19151.0], [679.0, 18674.0], [678.0, 19662.0], [686.0, 19155.0], [685.0, 18617.0], [684.0, 18395.0], [683.0, 17952.0], [682.0, 19348.0], [681.0, 19792.0], [680.0, 18431.0], [695.0, 18775.0], [694.0, 17820.0], [693.0, 19431.0], [692.0, 18790.0], [732.0, 16908.0], [735.0, 16942.0], [720.0, 17532.0], [722.0, 17487.0], [721.0, 17626.0], [725.0, 17164.0], [724.0, 17469.5], [734.0, 16814.0], [733.0, 16992.0], [731.0, 16725.0], [730.0, 17112.0], [729.0, 17279.0], [728.0, 17230.0], [719.0, 17527.0], [705.0, 18366.0], [704.0, 18640.0], [707.0, 16672.0], [706.0, 17656.0], [709.0, 18177.0], [708.0, 18190.0], [711.0, 18128.0], [710.0, 18367.0], [718.0, 17809.0], [717.0, 17652.0], [716.0, 17405.0], [715.0, 16243.0], [714.0, 18161.0], [713.0, 18004.0], [712.0, 17923.0], [727.0, 17001.0], [726.0, 17441.0], [764.0, 15361.0], [767.0, 15097.0], [753.0, 15605.0], [752.0, 15765.0], [755.0, 15472.0], [754.0, 15594.0], [757.0, 15457.0], [756.0, 15595.0], [766.0, 15242.0], [765.0, 15267.0], [763.0, 15238.0], [762.0, 15279.0], [761.0, 15178.0], [760.0, 15390.0], [751.0, 15675.0], [737.0, 16611.0], [736.0, 16596.0], [739.0, 16455.0], [738.0, 16700.0], [741.0, 16460.0], [740.0, 16407.0], [743.0, 16393.0], [742.0, 16343.0], [750.0, 16428.0], [749.0, 16103.0], [748.0, 16158.0], [746.0, 16319.0], [745.0, 16474.0], [744.0, 16204.0], [759.0, 15237.0], [758.0, 15271.0], [792.0, 13929.0], [796.0, 13590.0], [797.0, 13450.0], [785.0, 14543.0], [784.0, 14598.0], [787.0, 14459.0], [786.0, 14486.0], [795.0, 13900.0], [794.0, 14047.0], [793.0, 13767.0], [783.0, 14553.0], [769.0, 15235.0], [768.0, 15168.0], [771.0, 15077.0], [770.0, 14932.0], [773.0, 15098.0], [772.0, 14987.0], [775.0, 14734.0], [774.0, 14648.0], [782.0, 14664.0], [781.0, 14492.0], [780.0, 14591.0], [779.0, 14426.0], [778.0, 14583.0], [777.0, 14583.0], [776.0, 14764.0], [791.0, 14075.0], [790.0, 14041.0], [789.0, 14757.0], [788.0, 14244.0], [828.0, 11855.0], [831.0, 12175.0], [817.0, 13009.0], [816.0, 12727.0], [819.0, 12455.0], [818.0, 12430.0], [821.0, 12505.0], [820.0, 12495.0], [830.0, 11706.0], [829.0, 12057.0], [827.0, 12196.0], [826.0, 12219.0], [825.0, 12306.0], [824.0, 12533.0], [815.0, 12732.0], [804.0, 11322.5], [801.0, 11337.0], [807.0, 11310.5], [805.0, 11308.0], [814.0, 12770.0], [813.0, 12937.0], [812.0, 12951.0], [811.0, 13039.0], [810.0, 13173.0], [809.0, 13244.0], [808.0, 13262.0], [823.0, 12359.0], [822.0, 12486.0], [860.0, 11096.0], [863.0, 10758.0], [849.0, 10191.0], [851.0, 11113.0], [850.0, 11285.0], [853.0, 11243.0], [852.0, 11082.0], [862.0, 10595.0], [861.0, 10848.0], [859.0, 11131.0], [858.0, 11169.0], [857.0, 10724.0], [856.0, 10929.0], [847.0, 11379.0], [832.0, 11713.0], [834.0, 11635.0], [833.0, 12079.0], [836.0, 11546.0], [835.0, 11632.0], [838.0, 11656.0], [837.0, 11464.0], [846.0, 11670.0], [845.0, 11291.0], [844.0, 11492.0], [843.0, 10653.6], [855.0, 11082.0], [854.0, 11132.0], [892.0, 9891.0], [895.0, 9436.0], [881.0, 10247.0], [880.0, 10085.0], [883.0, 9991.0], [882.0, 10086.0], [885.0, 10156.0], [884.0, 10084.0], [894.0, 9697.0], [893.0, 9690.0], [891.0, 9892.0], [890.0, 9942.0], [889.0, 9956.0], [888.0, 9672.0], [879.0, 10303.0], [865.0, 10594.0], [864.0, 10938.0], [867.0, 10471.0], [866.0, 10763.0], [869.0, 10490.0], [868.0, 10619.0], [871.0, 10420.0], [870.0, 10266.0], [878.0, 10330.0], [877.0, 10406.0], [875.0, 10201.0], [874.0, 10439.0], [873.0, 10493.0], [872.0, 10373.0], [887.0, 9750.0], [886.0, 10204.0], [924.0, 6957.0], [927.0, 6693.0], [913.0, 7823.0], [912.0, 7845.0], [915.0, 7780.0], [914.0, 7653.0], [917.0, 7397.0], [916.0, 7535.0], [926.0, 6836.0], [925.0, 6863.0], [923.0, 6926.0], [922.0, 6834.0], [921.0, 7143.0], [920.0, 7114.0], [911.0, 7942.0], [897.0, 9535.0], [896.0, 9439.0], [899.0, 9077.0], [898.0, 9332.0], [901.0, 9268.0], [900.0, 9165.0], [903.0, 9042.0], [902.0, 9149.0], [910.0, 8164.0], [909.0, 8472.0], [908.0, 8486.0], [907.0, 8633.0], [906.0, 8861.0], [905.0, 8889.0], [904.0, 8921.0], [919.0, 7181.0], [918.0, 7178.0], [956.0, 5728.0], [959.0, 5672.0], [945.0, 6048.0], [944.0, 6174.0], [947.0, 6073.0], [946.0, 5943.0], [949.0, 6019.0], [948.0, 6073.0], [958.0, 5660.0], [957.0, 5704.0], [955.0, 5761.0], [954.0, 5862.0], [953.0, 5933.0], [952.0, 5896.0], [943.0, 6216.0], [929.0, 6682.0], [928.0, 6813.0], [931.0, 6759.0], [930.0, 6664.0], [933.0, 6589.0], [932.0, 6650.0], [935.0, 6521.0], [934.0, 6700.0], [942.0, 6319.0], [941.0, 6252.0], [940.0, 6385.0], [939.0, 6408.0], [938.0, 6481.0], [937.0, 6383.0], [936.0, 6440.0], [951.0, 5905.0], [950.0, 5973.0], [984.0, 4829.0], [990.0, 4738.0], [991.0, 4590.0], [977.0, 5149.0], [976.0, 5073.0], [979.0, 5099.0], [978.0, 5141.0], [989.0, 4668.0], [988.0, 4714.666666666667], [985.0, 4712.0], [975.0, 5188.0], [961.0, 5679.0], [960.0, 5660.0], [963.0, 5538.0], [962.0, 5676.0], [965.0, 5515.0], [964.0, 5443.0], [967.0, 5508.0], [966.0, 5467.0], [974.0, 5194.0], [973.0, 5276.0], [972.0, 5414.0], [971.0, 5401.0], [970.0, 5415.0], [969.0, 5423.0], [968.0, 5417.0], [983.0, 4806.0], [982.0, 4945.0], [981.0, 5022.0], [980.0, 4960.0], [1000.0, 3468.0], [999.0, 3919.0], [998.0, 4001.0], [997.0, 4078.0], [996.0, 4185.0], [995.0, 4264.0], [994.0, 4293.0], [993.0, 4558.0], [992.0, 4601.0], [1.0, 69916.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[472.3138888888892, 28199.311111111125]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 177.5, "minX": 1.61021484E12, "maxY": 7931235.7, "series": [{"data": [[1.6102149E12, 613741.25], [1.61021484E12, 7931235.7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6102149E12, 177.5], [1.61021484E12, 2293.3]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6102149E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 25215.872636815926, "minX": 1.61021484E12, "maxY": 68177.38666666667, "series": [{"data": [[1.6102149E12, 68177.38666666667], [1.61021484E12, 25215.872636815926]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6102149E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 24443.810945273613, "minX": 1.61021484E12, "maxY": 68168.44, "series": [{"data": [[1.6102149E12, 68168.44], [1.61021484E12, 24443.810945273613]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6102149E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 10275.94925373136, "minX": 1.61021484E12, "maxY": 64145.94666666666, "series": [{"data": [[1.6102149E12, 64145.94666666666], [1.61021484E12, 10275.94925373136]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6102149E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 161.0, "minX": 1.61021484E12, "maxY": 69916.0, "series": [{"data": [[1.6102149E12, 69916.0], [1.61021484E12, 50458.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6102149E12, 68705.4], [1.61021484E12, 47519.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6102149E12, 69916.0], [1.61021484E12, 49862.3]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6102149E12, 68797.8], [1.61021484E12, 49063.5]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6102149E12, 66772.0], [1.61021484E12, 161.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6102149E12, 68250.0], [1.61021484E12, 24972.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6102149E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 276.0, "minX": 1.0, "maxY": 69916.0, "series": [{"data": [[32.0, 48992.0], [2.0, 33490.5], [42.0, 49741.5], [49.0, 68445.0], [7.0, 4078.0], [9.0, 7845.0], [10.0, 9059.5], [11.0, 276.0], [12.0, 39196.0], [13.0, 25897.0], [14.0, 27909.0], [15.0, 16407.0], [16.0, 35275.5], [1.0, 69916.0], [17.0, 22732.0], [18.0, 21435.5], [19.0, 42610.0], [20.0, 27277.0], [21.0, 20483.0], [22.0, 10805.5], [23.0, 37601.0], [26.0, 10330.0], [27.0, 47311.0], [28.0, 5938.0], [29.0, 5416.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[18.0, 11311.5], [23.0, 10652.0], [26.0, 31701.0], [29.0, 29392.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 49.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 69899.0, "series": [{"data": [[32.0, 48980.0], [2.0, 33476.5], [42.0, 49733.0], [49.0, 68439.0], [7.0, 4073.0], [9.0, 7836.0], [10.0, 9044.5], [11.0, 259.0], [12.0, 39185.0], [13.0, 25890.0], [14.0, 27898.5], [15.0, 16389.0], [16.0, 35269.0], [1.0, 69899.0], [17.0, 22726.0], [18.0, 21422.5], [19.0, 42601.0], [20.0, 27266.0], [21.0, 20468.0], [22.0, 10794.0], [23.0, 37586.5], [26.0, 10324.0], [27.0, 47302.0], [28.0, 5924.0], [29.0, 5410.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[18.0, 0.0], [23.0, 0.0], [26.0, 0.0], [29.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 49.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 8.716666666666667, "minX": 1.61021478E12, "maxY": 9.283333333333333, "series": [{"data": [[1.61021478E12, 8.716666666666667], [1.61021484E12, 9.283333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61021484E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.6, "minX": 1.61021484E12, "maxY": 16.15, "series": [{"data": [[1.6102149E12, 1.25], [1.61021484E12, 16.15]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.61021484E12, 0.6]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6102149E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.6, "minX": 1.61021484E12, "maxY": 16.15, "series": [{"data": [[1.6102149E12, 1.25], [1.61021484E12, 16.15]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.61021484E12, 0.6]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6102149E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.6, "minX": 1.61021484E12, "maxY": 16.15, "series": [{"data": [[1.6102149E12, 1.25], [1.61021484E12, 16.15]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.61021484E12, 0.6]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6102149E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

